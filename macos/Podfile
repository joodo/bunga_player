platform :osx, '11.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if Gem::Version.new(config.build_settings['MACOSX_DEPLOYMENT_TARGET']) < Gem::Version.new('11.0')
        config.build_settings['MACOSX_DEPLOYMENT_TARGET'] = '11.0'
      end
    end
    flutter_additional_macos_build_settings(target)

    # Reduce agora app size
    # See https://docs.agora.io/en/video-calling/best-practices/app-size-optimization?platform=flutter#ios-and-macos
    targets_to_weaklink=['Pods-Runner', "agora_rtc_engine"]
    frameworks_to_weaklink=["AgoraAudioBeautyExtension", "AgoraClearVisionExtension", "AgoraContentInspectExtension", "AgoraDrmLoaderExtension", "AgoraSpatialAudioExtension", "AgoraVideoSegmentationExtension", "AgoraFaceCaptureExtension", "AgoraFaceDetectionExtension", "AgoraSuperResolutionExtension", "AgoraScreenCaptureExtension", "AgoraVideoQualityAnalyzerExtension", "AgoraVideoEncoderExtension", "video_enc", "AgoraVideoDecoderExtension", "video_dec", "AgoraVideoAv1DecoderExtension", "AgoraLipSyncExtension"]
    next unless targets_to_weaklink.include?(target.name)
    target.build_configurations.each do |config|
      base_config_reference = config.base_configuration_reference
      unless base_config_reference. nil?
        xcconfig_path = base_config_reference.real_path
        xcconfig = File.read(xcconfig_path)
        frameworks_to_weaklink.each do |framework|
          xcconfig = xcconfig.gsub(/-framework "#{framework}"/, "-weak_framework \"#{framework}\"")
        end
        File.open(xcconfig_path, "w") { |file| file << xcconfig }
      end
    end
  end
end
